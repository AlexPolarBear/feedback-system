
Алгоритмы для NP-трудных задач Algorithms for NP-hard problems
(А.С.Куликов или И.А.Близнец)
Одним из центральных открытых вопросов компьютерных наук является вопрос о равенстве 
классов P и NP. Неформально его можно сформулировать так: «Верно ли, что для каждой 
алгоритмической задачи, решение которой можно быстро проверить, можно быстро найти решение?» 
Ответа мы до сих пор не знаем. NP-трудные задачи — в некотором смысле самые сложные из 
алгоритмических задач. Классический пример — задача 3-раскраски графа, в которой вершины 
данного неориентированного графа нужно покрасить так, чтобы концы всех рёбер были разного цвета. 
Действительно, проверить, является ли заданная раскраска правильной, легко. В то же время мы 
не знаем алгоритмов, которые бы за полиномиальное время проверяли, есть ли у данного графа 
такая раскраска. Таких задач очень много, они часто возникают на практике.

В курсе мы рассмотрим различные способы решения таких задач: 
* точные алгоритмы: алгоритмы, находящие решение за экспоненциальное время, но при этом избегающие полного перебора;
* приближённые алгоритмы: алгоритмы, строящие за полиномиальное время решение, которое гарантированно несильно хуже оптимального;
* параметризованные алгоритмы: алгоритмы, являющиеся полиномиальными при условии, что некоторый параметр входных даных ограничен; 
* алгоритмы для частных случаев: алгоритмы, строящие за полиномиальное время точное решение в некоторых специальных случаях.

Интересовать нас будут в первую очередь алгоритмы с доказуемыми оценками на время работы и/или качество 
выдаваемого решения, но мы обзорно рассмотрим и эвристические методы решения, про которые, как правило, 
ничего не доказано, но они хорошо работают на практике. Мы также рассмотрим недавние результаты о тонких 
сведениях, показывающие, что ускорить некоторые известные алгоритмы для полиномиальных задач не проще, 
чем алгоритмы для некоторых NP-трудных задач.
2019-045378_ABS.txt
2019-045378_ABS.txt. На экране.