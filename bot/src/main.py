import logging
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from config import bot_token, max_page_items_count
from db_proxy_interface import DB_Proxy_Interface
from ranking_interface import Ranking_Interface 


logging.basicConfig(level=logging.INFO)


try:
    bot = Bot(token=bot_token)
except exceptions.ValidationError as e:
    print(e)
    print("Hint: set correct bot_token in ../data/config.json file before running up the bot")
    exit(0)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class user_message(StatesGroup):
    review = State()
    score = State()
    course_name = State()
    text_with_preferences = State()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'main_page', state='*')
async def back_to_main_page(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    await show_main_page(callback_query.from_user.id)
    await bot.answer_callback_query(callback_query.id)

async def show_main_page(chat_id):
    text = """
üëã –ü—Ä–∏–≤–µ—Ç!

ü§ñ –≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤, –æ—Ü–µ–Ω–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"!

–¢—É—Ç —Ç—ã c–º–æ–∂–µ—à—å:
1Ô∏è‚É£ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É —Ç–µ–±—è –∫—É—Ä—Å—É üìö
2Ô∏è‚É£ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç–æ–±–æ—é –∫—É—Ä—Å üìù
3Ô∏è‚É£ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –Ω–æ–≤—ã–π —Å–µ–º–µ—Å—Ç—Ä —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º üéØ
"""

    keyboard = InlineKeyboardMarkup()
    feedback_system_button = InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤', callback_data='search_courses')
    keyboard.add(feedback_system_button)
    preferences_settings_button = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', callback_data='set_courses_preferences')
    keyboard.add(preferences_settings_button)
    reccomended_courses_button = InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã', callback_data='get_re—Åcomended_courses')
    keyboard.add(reccomended_courses_button)
    await bot.send_message(chat_id, text=text, reply_markup=keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'get_re—Åcomended_courses', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
#     text = '''
# –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–∞–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–ø—Ä–∏ –Ω–µ—Ç–æ—á–Ω–æ—Ç—è—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –µ–≥–æ)

# –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞,
# –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞</b>
# '''
    chat_id = callback_query.from_user.id
    courses = Ranking_Interface.get_relevant_courses_for_user(chat_id)
    await state.update_data(
        {
            'start_course_list_index': 0,
            'course_list': courses,
            'last_callback_data': 'main_page'
        }
    )
    await show_course_list(callback_query.from_user.id, state, drop_new_message=True)
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'search_courses', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    text = '''
–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–∞–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–ø—Ä–∏ –Ω–µ—Ç–æ—á–Ω–æ—Ç—è—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –µ–≥–æ)

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞,
–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞</b>
'''
    await state.update_data(
            {
                'last_callback_data': 'search_courses'
            }
        )
    keyboard = InlineKeyboardMarkup()
    list_selection_button = InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞', callback_data='select_course_from_list')
    keyboard.add(list_selection_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_page')
    keyboard.add(back_button)
    await bot.send_message(callback_query.from_user.id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    await user_message.course_name.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=user_message.course_name)
async def review_handler_text(message: types.Message, state: FSMContext):
    course_name = message.text
    await state.update_data(
        {
            'course_name': course_name
        }
    )
    await state.reset_state(with_data=False)
    # await get_courses_by_user_course_name(message.chat.id, state)
    user_data = await state.get_data()
    course_name = user_data.get('course_name')
    courses = Ranking_Interface.get_courses_by_user_request(request=course_name)
    await state.update_data(
        {
            'start_course_list_index': 0,
            'course_list': courses
        }
    )
    await show_course_list(message.chat.id, state, drop_new_message=True)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    Ranking_Interface.add_user_if_not_exists(chat_id)
    await show_main_page(message.chat.id)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'select_course_from_list', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    course_list = DB_Proxy_Interface.get_all_courses()[:34]
    await state.update_data(
        {
            'start_course_list_index': 0,
            'course_list': course_list
        }
    )
    await show_course_list(callback_query.from_user.id, state, drop_new_message=True)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_previous_courses', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    user_data = await state.get_data()
    start_index = user_data.get('start_course_list_index')
    await state.update_data(
        {
            'start_course_list_index': start_index - max_page_items_count
        }
    )
    await show_course_list(callback_query.from_user.id, state)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_following_courses', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    user_data = await state.get_data()
    start_index = user_data.get('start_course_list_index')
    await state.update_data(
        {
            'start_course_list_index': start_index + max_page_items_count
        }
    )
    await show_course_list(callback_query.from_user.id, state)
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'to_course_list', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await show_course_list(callback_query.from_user.id, state, drop_new_message=True)
    await bot.answer_callback_query(callback_query.id)


async def show_course_list(chat_id, state: FSMContext, drop_new_message=False):
    user_data = await state.get_data()
    course_list = user_data.get('course_list')
    start_index = user_data.get('start_course_list_index')
    last_callback_data = user_data.get('last_callback_data')
    keyboard = InlineKeyboardMarkup()
    for course in course_list[start_index:min(len(course_list), start_index + max_page_items_count)]:
        button = InlineKeyboardButton(text=course['full_name'], callback_data='course_{}_'.format(course['short_name']))
        keyboard.add(button)
    if start_index != 0:
        show_previous_courses_button = InlineKeyboardButton(text='<<', callback_data='show_previous_courses')
        keyboard.add(show_previous_courses_button)
    if start_index + max_page_items_count < len(course_list):
        show_next_courses_button = InlineKeyboardButton(text='>>', callback_data='show_following_courses')
        keyboard.add(show_next_courses_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=last_callback_data)
    keyboard.add(back_button)
    text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:'
    if drop_new_message:
        message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)
    else:
        message_to_edit_id = user_data.get('message_to_edit_id')
        message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('course_'), state='*')
async def process_callback_course(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    start_index = 7
    end_index = callback_query.data.index("_", start_index)
    course_short_name = callback_query.data[7:end_index]
    course = DB_Proxy_Interface.get_course_by_short_name(course_short_name)
    lecturer_id = course['lecturer_id']
    await state.update_data(
        {
            'course_short_name': course_short_name,
            'lecturer_id': lecturer_id
        }
    )
    text = f"""
<i><b>–ö—É—Ä—Å: {course['full_name']}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {DB_Proxy_Interface.get_lecturer_name_by_id(lecturer_id)}</b></i>
"""

    keyboard = InlineKeyboardMarkup()
    watch_feedback_button = InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ', callback_data='view_feedback')
    keyboard.add(watch_feedback_button)
    add_feedback_button = InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å', callback_data='add_feedback')
    keyboard.add(add_feedback_button)
    user_data = await state.get_data()
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='to_course_list')
    keyboard.add(back_button)
    drop_new_message = not callback_query.data.endswith('_edit_last_message')
    chat_id = callback_query.from_user.id 
    if drop_new_message:
        message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    else:
        message_to_edit_id = user_data.get('message_to_edit_id')
        message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'view_feedback', state='*')
async def process_callback_feedback_view(callback_query: types.CallbackQuery, state: FSMContext):
    await show_feedback_for_course(callback_query.from_user.id, state, drop_new_message=False)
    await bot.answer_callback_query(callback_query.id)
    
async def show_feedback_for_course(chat_id, state: FSMContext, drop_new_message=True):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    course = DB_Proxy_Interface.get_course_by_short_name(course_short_name)
    metrics = DB_Proxy_Interface.get_all_metrics()
    text = f"""
<i><b>–ö—É—Ä—Å: {course['full_name']}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {DB_Proxy_Interface.get_lecturer_name_by_id(course['lecturer_id'])}
–§–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞: {course['size']}</b></i>

–°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:
"""
    # –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: 3.5/5.0
    for metric_id, metric_name in metrics:
        summary_score = DB_Proxy_Interface.get_summary_score_for_course(course['short_name'], chat_id, metric_id, course['lecturer_id'])
        text += f"""{metric_name}: {summary_score}\n"""

#     text += f"""
# –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—Å–∞: 73%
#     """
    keyboard = InlineKeyboardMarkup()
    watch_review_button = InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data='review_view')
    keyboard.add(watch_review_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='course_{}_edit_last_message'.format(course_short_name))
    keyboard.add(back_button)
    if drop_new_message:
        message = await bot.send_message(chat_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    else:
        message_to_edit_id = user_data.get('message_to_edit_id')
        message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )
    
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'review_view', state='*')
async def process_callback_review_view(callback_query: types.CallbackQuery, state: FSMContext):
    await show_review_for_course(callback_query.from_user.id, state, drop_new_message=False)
    await bot.answer_callback_query(callback_query.id)

async def show_review_for_course(chat_id, state: FSMContext, drop_new_message=True):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    course = DB_Proxy_Interface.get_course_by_short_name(course_short_name)
    review = DB_Proxy_Interface.get_feedback_for_course(course_short_name, course['lecturer_id'])
    text1 = f"""
<i><b>–ö—É—Ä—Å: {course['full_name']}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {DB_Proxy_Interface.get_lecturer_name_by_id(course['lecturer_id'])}</b></i>   
"""
    text2 = ""
    for index, review_item in enumerate(review):
        text2 += f"""
–û—Ç–∑—ã–≤ {index + 1} <i>({review_item['date']})</i>: 
{review_item['text']}
        """
    if len(review) == 0:
        text2 = "\n–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!"
    text = text1 + text2
    keyboard = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_feedback')
    keyboard.add(back_button)
    if drop_new_message:
        message = await bot.send_message(chat_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    else:
        message_to_edit_id = user_data.get('message_to_edit_id')
        message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )
     
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'add_feedback', state='*')
async def process_callback_feedback_addition(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    course = DB_Proxy_Interface.get_course_by_short_name(course_short_name)
    metrics = DB_Proxy_Interface.get_all_metrics()
    keyboard = InlineKeyboardMarkup()
    button_for_first_metric = InlineKeyboardButton(text=metrics[0][1], callback_data='estimate_metric-{}'.format(metrics[0][0]))
    button_for_second_metric = InlineKeyboardButton(text=metrics[1][1], callback_data='estimate_metric-{}'.format(metrics[1][0]))
    keyboard.add(button_for_first_metric, button_for_second_metric)
    button_for_third_metric = InlineKeyboardButton(text=metrics[2][1], callback_data='estimate_metric-{}'.format(metrics[2][0]))
    button_for_fourth_metric = InlineKeyboardButton(text=metrics[3][1], callback_data='estimate_metric-{}'.format(metrics[3][0]))
    keyboard.add(button_for_third_metric, button_for_fourth_metric)
    add_review_button = InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='add_review')
    keyboard.add(add_review_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='course_{}_edit_last_message'.format(course_short_name))
    keyboard.add(back_button)
    text = f""" 
<i><b>–ö—É—Ä—Å: {course['full_name']}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {DB_Proxy_Interface.get_lecturer_name_by_id(course['lecturer_id'])}</b></i>

–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:
"""
    chat_id = callback_query.from_user.id
    message_to_edit_id = user_data.get('message_to_edit_id')
    message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('estimate_metric-'), state='*')
async def process_callback_metric_estimation(callback_query: types.CallbackQuery, state: FSMContext):
    metric_id = callback_query.data[16:]
    await state.update_data(
        {
            'metric_id': metric_id
        }
    )
    await suggest_estimate_metric(callback_query.from_user.id, state, drop_new_message=False)
    await bot.answer_callback_query(callback_query.id)

async def suggest_estimate_metric(chat_id, state: FSMContext, drop_new_message=True):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    course = DB_Proxy_Interface.get_course_by_short_name(course_short_name)
    metric_id = user_data.get('metric_id')
    metric_name = DB_Proxy_Interface.get_metric_name_by_id(metric_id)
    keyboard = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='add_feedback')
    keyboard.add(back_button)
    text = f"""
<i><b>–ö—É—Ä—Å: {course['full_name']}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {DB_Proxy_Interface.get_lecturer_name_by_id(course['lecturer_id'])}</b></i>
    
–ú–µ—Ç—Ä–∏–∫–∞: <b>{metric_name}</b>
""" 
    personal_score = DB_Proxy_Interface.get_score_by_chat_id(course['short_name'], chat_id, metric_id, course['lecturer_id'])
    if personal_score != None:
        text += f"""\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {personal_score} (–Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞—Ç—Ä—ë—Ç —Å—Ç–∞—Ä—É—é)\n"""
    text += """
–û—Ü–µ–Ω–∏—Ç–µ –ø–æ –¥–µ—Å—è—Ç–∏–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ (1-10):"""
    if drop_new_message: 
        message = await bot.send_message(chat_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    else:
        message_to_edit_id = user_data.get('message_to_edit_id')
        message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )
    await user_message.score.set()
    

@dp.message_handler(state=user_message.score)
async def score_handler_text(message: types.Message, state: FSMContext):
    score_text = message.text
    await state.reset_state(with_data=False)
    def is_valid_score(score_text):
        try:
            score = int(score_text)
            return score >= 1 and score <= 10 
        except:
            return False
    if is_valid_score(score_text):
        score = int(score_text) 
        await state.update_data(
            {
                'score': score
            }
        )
        keyboard = InlineKeyboardMarkup()
        yes_button = InlineKeyboardButton(text='–î–∞', callback_data='confirm_score')
        no_button = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='cancel_score')
        keyboard.add(yes_button, no_button)
        await message.answer(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –æ—Ü–µ–Ω–∫—É?", reply_markup=keyboard)
        pass
    else:
        await message.answer(text="–û—Ü–µ–Ω–∫–æ–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        await suggest_estimate_metric(message.chat.id, state)
        pass 

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'cancel_score', state='*')
async def process_callback_score_cancellation(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    del user_data['score']
    await state.set_data(user_data)
    chat_id = callback_query.from_user.id
    await bot.send_message(chat_id, text="–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await suggest_estimate_metric(chat_id, state)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'confirm_score', state='*')
async def process_callback_score_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    metric_id = user_data.get('metric_id')
    score = user_data.get('score')
    lecturer_id = user_data.get('lecturer_id')
    chat_id = callback_query.from_user.id
    DB_Proxy_Interface.add_or_replace_score(chat_id, metric_id, course_short_name, score, lecturer_id)
    await bot.send_message(chat_id, text="–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await show_feedback_for_course(chat_id, state)
    await bot.answer_callback_query(callback_query.id)



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'add_review', state='*')
async def process_callback_review_addition(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    course = DB_Proxy_Interface.get_course_by_short_name(course_short_name)
    keyboard = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='add_feedback')
    keyboard.add(back_button)
    text = f"""
<i><b>–ö—É—Ä—Å: {course['full_name']}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {DB_Proxy_Interface.get_lecturer_name_by_id(course['lecturer_id'])}</b></i>

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤
"""
    chat_id = callback_query.from_user.id
    message_to_edit_id = user_data.get('message_to_edit_id')
    message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )
    await user_message.review.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=user_message.review)
async def review_handler_text(message: types.Message, state: FSMContext):
    review_text = message.text
    await state.reset_state(with_data=False)
    await state.update_data(
        {
            'review_text': review_text
        }
    )
    keyboard = InlineKeyboardMarkup()
    yes_button = InlineKeyboardButton(text='–î–∞', callback_data='confirm_review')
    no_button = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='cancel_review')
    keyboard.add(yes_button, no_button)
    await message.answer(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤?", reply_markup=keyboard)
    
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'confirm_review', state='*')
async def process_callback_review_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    course_short_name = user_data.get('course_short_name')
    review_text = user_data.get('review_text')
    lecturer_id = user_data.get('lecturer_id')
    chat_id = callback_query.from_user.id
    DB_Proxy_Interface.add_feedback(course_short_name, chat_id, review_text, lecturer_id)
    await bot.send_message(chat_id, text="–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await show_review_for_course(chat_id, state)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'cancel_review', state='*')
async def process_callback_review_cancellation(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    del user_data['review_text']
    await state.set_data(user_data)
    chat_id = callback_query.from_user.id
    await bot.send_message(chat_id, text="–í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await show_review_for_course(chat_id, state)
    await bot.answer_callback_query(callback_query.id)


### RECOMENDATION SECTION

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'set_courses_preferences', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    keyboard = InlineKeyboardMarkup()
    feedback_system_button = InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–≥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É', callback_data='search_tags_by_text')
    keyboard.add(feedback_system_button)
    preferences_settings_button = InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö', callback_data='select_tags_from_list')
    keyboard.add(preferences_settings_button)
    reccomended_courses_button = InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ç–µ–≥–∏', callback_data='watch_user_tags')
    keyboard.add(reccomended_courses_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_page')
    keyboard.add(back_button)
    await bot.send_message(callback_query.from_user.id, text='...', reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'search_tags_by_text', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='set_courses_preferences')
    keyboard.add(back_button)
    await bot.send_message(callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏', reply_markup=keyboard)
    await user_message.text_with_preferences.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=user_message.text_with_preferences)
async def review_handler_text(message: types.Message, state: FSMContext):
    text_with_preferences = message.text
    await state.reset_state(with_data=False)
    tags = Ranking_Interface.get_tag_titles_by_user_request(request=text_with_preferences)
    await state.update_data(
        {
            'start_tag_list_index': 0,
            'tag_list': tags,
            'last_callback_data': 'search_tags_by_text'
        }
    )
    await show_tag_list(message.chat.id, state)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'select_tags_from_list', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    tags = Ranking_Interface.get_all_unselected_tags(chat_id)[:51]
    await state.update_data(
        {
            'start_tag_list_index': 0,
            'tag_list': tags,
            'last_callback_data': 'set_courses_preferences'
        }
    )
    await show_tag_list(chat_id, state)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_previous_tags', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    user_data = await state.get_data()
    start_tag_list_index = user_data.get('start_tag_list_index')
    await state.update_data(
        {
            'start_tag_list_index': start_tag_list_index - max_page_items_count
        }
    )
    await show_tag_list(chat_id, state, drop_new_message=False)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_following_tags', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    user_data = await state.get_data()
    start_tag_list_index = user_data.get('start_tag_list_index')
    await state.update_data(
        {
            'start_tag_list_index': start_tag_list_index + max_page_items_count
        }
    )
    await show_tag_list(chat_id, state, drop_new_message=False)
    await bot.answer_callback_query(callback_query.id)


async def show_tag_list(chat_id, state: FSMContext, drop_new_message=True):
    user_data = await state.get_data()
    tag_list = user_data.get('tag_list')
    start_index = user_data.get('start_tag_list_index')
    last_callback_data = user_data.get('last_callback_data')
    keyboard = InlineKeyboardMarkup()
    for tag_title in tag_list[start_index:min(len(tag_list), start_index + max_page_items_count)]:
        button = InlineKeyboardButton(text=tag_title, callback_data='save-tag-{}'.format(tag_title))
        keyboard.add(button)
    if start_index != 0:
        show_previous_courses_button = InlineKeyboardButton(text='<<', callback_data='show_previous_tags')
        keyboard.add(show_previous_courses_button)
    if start_index + max_page_items_count < len(tag_list):
        show_next_courses_button = InlineKeyboardButton(text='>>', callback_data='show_following_tags')
        keyboard.add(show_next_courses_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=last_callback_data)
    keyboard.add(back_button)
    # await bot.send_message(chat_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', reply_markup=keyboard)
    text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'
    if drop_new_message:
        message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)
    else:
        message_to_edit_id = user_data.get('message_to_edit_id')
        message = await bot.edit_message_text(chat_id=chat_id, message_id=message_to_edit_id, text=text, reply_markup=keyboard)
    message_id = message.message_id
    await state.update_data(
        {
            'message_to_edit_id': message_id
        }
    )

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('save-tag-'), state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    saved_tag_title = callback_query.data[9:]
    chat_id = callback_query.from_user.id
    Ranking_Interface.add_tag_to_user(chat_id, saved_tag_title)
    user_data = await state.get_data()
    tag_list = user_data.get('tag_list')
    tags = [tag_title for tag_title in tag_list if tag_title != saved_tag_title]
    await state.update_data(
        {
            'tag_list': tags
        }
    )
    await bot.send_message(chat_id, text='–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    await show_tag_list(chat_id, state)
    await bot.answer_callback_query(callback_query.id)



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'watch_user_tags', state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await show_user_tags(callback_query.from_user.id, state)
    await bot.answer_callback_query(callback_query.id)

async def show_user_tags(chat_id, state: FSMContext):
    user_tag_titles = Ranking_Interface.get_user_tag_titles(chat_id)
    text = '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'
    if len(user_tag_titles) == 0:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–≥–æ–≤'
    keyboard = InlineKeyboardMarkup()
    for tag_title in user_tag_titles:
        button = InlineKeyboardButton(text=tag_title, callback_data='delete-tag-{}'.format(tag_title))
        keyboard.add(button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='set_courses_preferences')
    keyboard.add(back_button)
    await bot.send_message(chat_id, text=text, reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('delete-tag-'), state='*')
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    tag_title = callback_query.data[11:]
    chat_id = callback_query.from_user.id
    Ranking_Interface.delete_tag_from_user(chat_id, tag_title)
    await bot.send_message(chat_id, text='–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    await show_user_tags(chat_id, state)
    await bot.answer_callback_query(callback_query.id)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


